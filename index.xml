<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KHIA&#39;s personal Blog</title>
    <link>http://khia.github.io/blog/</link>
    <description>Recent content on KHIA&#39;s personal Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 13 Nov 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://khia.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Consistency management in distributed settings</title>
      <link>http://khia.github.io/blog/post/consistency-management-in-distributed-settings/</link>
      <pubDate>Thu, 13 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://khia.github.io/blog/post/consistency-management-in-distributed-settings/</guid>
      <description>Consistency management in distributed settings Disclaimer I just participate in numerous design discussions related to genomu development. However all ideas and 99% of the implementation due to @yrashk. I decided to write this post to document the design of genomu inspite the fact that this great development didn&amp;rsquo;t take off.
Introduction Being a consultancy agency we had a client who have ordered a development of a backend for a system for doing sport events betting.</description>
    </item>
    
    <item>
      <title>Generating random looking IDs</title>
      <link>http://khia.github.io/blog/post/generating-random-looking-ids/</link>
      <pubDate>Thu, 13 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://khia.github.io/blog/post/generating-random-looking-ids/</guid>
      <description>Generating random looking IDs Introduction Quite often I find myself in a situation where I need a unique random looking IDs. The naive solution to this problem is to generate random IDs and memoize already issued ones to prevent duplicates. The question is can we do better?
Solution The soltution I am going to explore today is based on the use of block ciphers. Since their output is bijective (given same input IV and KEY) you will not have any collisions, unlike hashes.</description>
    </item>
    
    <item>
      <title>Protecting in-memory crypto material</title>
      <link>http://khia.github.io/blog/post/protecting-in-memory-crypto-material/</link>
      <pubDate>Thu, 13 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://khia.github.io/blog/post/protecting-in-memory-crypto-material/</guid>
      <description>Protecting in-memory crypto material Introduction Let&amp;rsquo;s say you operate a service which need to sign clients&amp;rsquo; requests. You would have to have a private key (signing key) on your server. Having keys on the server is ok as long as you fully control the server. You cannot trust the cloud provider if you use one. Even if a company you use doesn&amp;rsquo;t practice illegal access to information of their customers.</description>
    </item>
    
    <item>
      <title>Skype in docker</title>
      <link>http://khia.github.io/blog/post/skype-in-docker/</link>
      <pubDate>Thu, 13 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://khia.github.io/blog/post/skype-in-docker/</guid>
      <description>Skype in docker Introduction If you want to separate your personal life from work you would end up with two Skype accounts. However there is a problem. You cannot run multiple instances of Skype on a single computer (as single user). Here comes an idea to run Skype in the docker. Running Skype in docker is also useful for privacy sensitive individuals like myself. Since the Skype application is closed source and sends data in encrypted form.</description>
    </item>
    
    <item>
      <title>Elixir binding for lager</title>
      <link>http://khia.github.io/blog/project/exlager/</link>
      <pubDate>Sun, 21 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://khia.github.io/blog/project/exlager/</guid>
      <description>ExLager Embeds logging calls to ExLager into a module if currently configured logging level is less or equal than severity of a call. Otherwise no code is emmited. Therefore it doesn&amp;rsquo;t have any negative impact on performance of a production system when you configure error level even if you have tons of debug messages.</description>
    </item>
    
    <item>
      <title>Code Complete</title>
      <link>http://khia.github.io/blog/book/code_complete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://khia.github.io/blog/book/code_complete/</guid>
      <description>Features the best practices in the art and science of constructing software-topics include design, applying good techniques to construction, eliminating errors, planning, managing construction activities, and relating personal character to superior software. Original. (Intermediate)</description>
    </item>
    
    <item>
      <title>Why Programs Fail: A Guide to Systematic Debugging</title>
      <link>http://khia.github.io/blog/book/why_programs_fail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://khia.github.io/blog/book/why_programs_fail/</guid>
      <description>Debugging has undergone a sea change in recent years. Increasing processing power has allowed for the creation of much more sophisticated software tools for the analysis and debugging of programs. This in turn has allowed debugging to graduate from a black art to a systematic discipline. The time is right to summarize this new advanced approach to debugging. Why Programs Fail is about bugs in computer programs, how to reproduce them, how to find them, and how to fix them in such a way that they do not occur anymore.</description>
    </item>
    
  </channel>
</rss>